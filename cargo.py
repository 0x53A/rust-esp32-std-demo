# Cargo <-> PlatformIO integration script (to be auto-generated by cargo-pio)
# Calling 'pio run' will also build the Rust crate by invoking Cargo
#
# TODO: More documentation here

import os

Import("env")

def run_cargo(source, target, env):
    def derive_rust_target():
        targets = {
            # TODO: Add more
            "espressif32": "xtensa-esp32-none-elf",
            "esp8266": "xtensa-esp8266-none-elf"
        }

        platform = env.GetProjectOption("platform")
        target = targets.get(platform, "")

        if target == "":
            print(f"Cannot derive Rust target triple for platform {platform}. "
                "Specify the Rust target manually in platformio.ini using parameter rust_target = \"<rust-target-triple>\"")
            Exit(2)

        return target

    rust_lib = env.GetProjectOption("rust_lib")

    rust_target = env.GetProjectOption("rust_target", default = {})
    if rust_target == {}:
        rust_target = derive_rust_target()

    cargo_options = env.GetProjectOption("cargo_options", default = "")

    cargo_profile = env.GetProjectOption(
        "cargo_profile",
        default = "release" if env.GetProjectOption("build_type") == "release" else "debug")

    cargo_target_dir = env.GetProjectOption(
        "cargo_target_dir",
        default = os.path.join("$PROJECT_BUILD_DIR", "cargo")
            if env.GetProjectOption("cargo_pio_common_build_dir", default = False)
            else os.path.join("$PROJECT_DIR", "target"))

    env["ENV"]["BINDGEN_INC_FLAGS"] = env.subst("$_CPPINCFLAGS")

    if env.Execute(f"cargo build {'--release' if cargo_profile == 'release' else ''} --lib {cargo_options}"):
        Exit(1)

    env.Prepend(LIBPATH = [os.path.join(cargo_target_dir, rust_target, cargo_profile)])
    env.Prepend(LIBS = [rust_lib])

env.AddPreAction(os.path.join("$BUILD_DIR", env.subst("$PROGNAME$PROGSUFFIX")), run_cargo)
